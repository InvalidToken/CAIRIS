import ARM
from CairisHTTPError import ARMHTTPError, ObjectNotFoundHTTPError
from Vulnerability import Vulnerability
from data.CairisDAO import CairisDAO

__author__ = 'Robin Quetin'


class VulnerabilityDAO(CairisDAO):
    def __init__(self, session_id):
        CairisDAO.__init__(session_id)

    def get_vulnerabilities(self, constraint_id=-1, simplify=True):
        try:
            vulnerabilities = self.db_proxy.getVulnerabilities(constraint_id)
        except ARM.DatabaseProxyException as ex:
            raise ARMHTTPError(ex)

        if simplify:
            for key, value in vulnerabilities.items():
                vulnerabilities[key] = self.simplify(value)

        return vulnerabilities

    def get_vulnerability_by_id(self, id, simplify=True):
        found_vulnerability = None
        try:
            vulnerabilities = self.db_proxy.getVulnerabilities()
        except ARM.DatabaseProxyException as ex:
            raise ARMHTTPError(ex)

        idx = 0
        while found_vulnerability is None and idx < len(vulnerabilities):
            if vulnerabilities.values()[idx].theId == id:
                found_vulnerability = vulnerabilities.values()[idx]
            idx += 1

        if found_vulnerability is None:
            raise ObjectNotFoundHTTPError('The provided vulnerability ID')

        if simplify:
            found_vulnerability = self.simplify(found_vulnerability)

        return found_vulnerability
    
    def get_vulnerability_by_name(self, name, simplify=True):
        found_vulnerability = None
        try:
            vulnerabilities = self.db_proxy.getVulnerabilities()
        except ARM.DatabaseProxyException as ex:
            raise ARMHTTPError(ex)

        if vulnerabilities is not None:
            found_vulnerability = vulnerabilities.get(name)

        if found_vulnerability is None:
            raise ObjectNotFoundHTTPError('The provided vulnerability name')

        if simplify:
            found_vulnerability = self.simplify(found_vulnerability)

        return found_vulnerability

    def simplify(self, obj):
        assert isinstance(obj, Vulnerability)
        obj.theEnvironmentProperties = []
        obj.theEnvironmentDictionary = {}
        obj.severityLookup = {}
        return obj