import httplib

from flask import request, session, make_response
from flask.ext.restful import Resource
from flask_restful_swagger import swagger

from data.VulnerabilityDAO import VulnerabilityDAO
from tools.JsonConverter import json_serialize
from tools.MessageDefinitions import VulnerabilityMessage
from tools.ModelDefinitions import VulnerabilityModel
from tools.SessionValidator import get_session_id


__author__ = 'Robin Quetin'


class VulnerabilityAPI(Resource):
    #region Swagger Doc
    @swagger.operation(
        notes='Get all vulnerabilities',
        nickname='vulnerabilities-get',
        responseClass=VulnerabilityModel.__name__,
        responseContainer='List',
        parameters=[
            {
                "name": "ordered",
                "description": "Defines if the list has to be order",
                "default": 1,
                "required": False,
                "allowMultiple": False,
                "dataType": int.__name__,
                "paramType": "query"
            },
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                "code": httplib.BAD_REQUEST,
                "message": "The database connection was not properly set up"
            }
        ]
    )
    #endregion
    def get(self):
        session_id = get_session_id(session, request)
        constraint_id = request.args.get('constraint_id', -1)

        dao = VulnerabilityDAO(session_id)
        vulnerabilities = dao.get_vulnerabilities(constraint_id=constraint_id)
        dao.close()

        resp = make_response(json_serialize(vulnerabilities, session_id=session_id), httplib.OK)
        resp.contenttype = 'application/json'
        return resp

    # region Swagger Doc
    @swagger.operation(
        notes='Creates a new vulnerability',
        nickname='vulnerabilities-post',
        parameters=[
            {
                "name": "body",
                "description": "The serialized version of the new vulnerability to be added",
                "required": True,
                "allowMultiple": False,
                "type": VulnerabilityMessage.__name__,
                "paramType": "body"
            },
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                'code': httplib.BAD_REQUEST,
                'message': 'One or more attributes are missing'
            },
            {
                'code': httplib.CONFLICT,
                'message': 'Some problems were found during the name check'
            },
            {
                'code': httplib.CONFLICT,
                'message': 'A database error has occurred'
            }
        ]
    )
    # endregion
    def post(self):
        session_id = get_session_id(session, request)

        dao = VulnerabilityDAO(session_id)
        new_vuln = dao.from_json(request)
        vuln_id = dao.add_vulnerability(new_vuln)
        dao.close()

        resp_dict = {'message': 'Vulnerability successfully added', 'vulnerability_id': vuln_id}
        resp = make_response(json_serialize(resp_dict), httplib.OK)
        resp.contenttype = 'application/json'
        return resp
    
class VulnerabilityByIdAPI(Resource):
    # region Swagger Doc
    @swagger.operation(
        notes='Get a vulnerability by ID',
        nickname='vulnerability-by-id-get',
        responseClass=VulnerabilityModel.__name__,
        parameters=[
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                "code": httplib.BAD_REQUEST,
                "message": "The database connection was not properly set up"
            }
        ]
    )
    # endregion
    def get(self, id):
        session_id = get_session_id(session, request)

        dao = VulnerabilityDAO(session_id)
        vulnerability = dao.get_vulnerability_by_id(vuln_id=id)
        dao.close()

        resp = make_response(json_serialize(vulnerability, session_id=session_id), httplib.OK)
        resp.headers['Content-type'] = 'application/json'
        return resp

class VulnerabilityByNameAPI(Resource):
    # region Swagger Doc
    @swagger.operation(
        notes='Get a vulnerability by name',
        nickname='vulnerability-by-name-get',
        responseClass=VulnerabilityModel.__name__,
        parameters=[
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                "code": httplib.BAD_REQUEST,
                "message": "The database connection was not properly set up"
            }
        ]
    )
    # endregion
    def get(self, name):
        session_id = get_session_id(session, request)

        dao = VulnerabilityDAO(session_id)
        vulnerability = dao.get_vulnerability_by_name(name=name)
        dao.close()

        resp = make_response(json_serialize(vulnerability, session_id=session_id), httplib.OK)
        resp.headers['Content-type'] = 'application/json'
        return resp

    # region Swagger Docs
    @swagger.operation(
        notes='Updates a vulnerability',
        nickname='vulnerability-by-name-put',
        parameters=[
            {
                'name': 'body',
                "description": "Options to be passed to the import tool",
                "required": True,
                "allowMultiple": False,
                'type': VulnerabilityMessage.__name__,
                'paramType': 'body'
            },
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                'code': httplib.BAD_REQUEST,
                'message': 'The provided file is not a valid XML file'
            },
            {
                'code': httplib.BAD_REQUEST,
                'message': '''Some parameters are missing. Be sure 'vulnerability' is defined.'''
            }
        ]
    )
    # endregion
    def put(self, name):
        session_id = get_session_id(session, request)

        dao = VulnerabilityDAO(session_id)
        req = dao.from_json(request)
        dao.update_vulnerability(req, name=name)
        dao.close()

        resp_dict = {'message': 'Vulnerability successfully updated'}
        resp = make_response(json_serialize(resp_dict), httplib.OK)
        resp.headers['Content-type'] = 'application/json'
        return resp

    # region Swagger Doc
    @swagger.operation(
        notes='Deletes an existing vulnerability',
        nickname='vulnerability-by-name-delete',
        parameters=[
            {
                "name": "session_id",
                "description": "The ID of the user's session",
                "required": False,
                "allowMultiple": False,
                "dataType": str.__name__,
                "paramType": "query"
            }
        ],
        responseMessages=[
            {
                'code': httplib.BAD_REQUEST,
                'message': 'One or more attributes are missing'
            },
            {
                'code': httplib.NOT_FOUND,
                'message': 'The provided vulnerability name could not be found in the database'
            },
            {
                'code': httplib.CONFLICT,
                'message': 'Some problems were found during the name check'
            },
            {
                'code': httplib.CONFLICT,
                'message': 'A database error has occurred'
            }
        ]
    )
    # endregion
    def delete(self, name):
        session_id = get_session_id(session, request)

        dao = VulnerabilityDAO(session_id)
        dao.delete_vulnerability(name=name)
        dao.close()

        resp_dict = {'message': 'Vulnerability successfully deleted'}
        resp = make_response(json_serialize(resp_dict), httplib.OK)
        resp.headers['Content-type'] = 'application/json'
        return resp